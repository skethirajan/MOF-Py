[tool.poetry]
name = "mofpy"
version = "0.1.0"
description = "Python package to handle MOF structures and perform various analysis."
license = "MIT"
authors = ["Sudheesh Kumar Ethirajan <e.sudheeshkumar@gmail.com>"]
readme = "README.md"
repository = "https://github.com/skethirajan/MOF-Py"
documentation = ""
keywords = ["mof", "comp-chem", "metal-organic-frameworks", "porous-materials", "structure-analysis"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: Unix",
    "Operating System :: MacOS",
]
packages = [{include = "mofpy", from = "src"}]

[tool.poetry.dependencies]
python = "^3.9"
numpy = { version = "1.26.0", python = ">=3.9,<3.13" }
scipy = { version = "^1.11.3", python = ">=3.9,<3.13" }
matplotlib = "^3.8.0"
pandas = "^1.5.0"
seaborn = "^0.13.0"
scikit-learn = "^1.3.1"
ase = "^3.22.1"
pymatgen = "^2023.10.11"
matminer = "^0.9.0"
mofdscribe = "^0.0.8"
pormake = "^0.2.0"
fire = "^0.5.0"
networkx = "^3.2"

[tool.poetry.group.dev.dependencies]
black = ">=23.7.0"
isort = ">=5.12.0"
pytest = ">=7.4.0"
pytest-cov = ">=3.0.0"
ruff = ">=0.0.285"

[tool.poetry.group.docs.dependencies]
mkdocs-material = ">=9.4.0"
mkdocstrings = { version = ">=0.22.0", extras = ["python"] }
mkdocs-gen-files = ">=0.5.0"
mkdocs-literate-nav = ">=0.6.0"
pillow = ">=10.0.0"
cairosvg = ">=2.7.1"

[tool.setuptools.package-data]
mofpy = ["py.typed"]

[tool.pyright]
include = ["mofpy"]
exclude = ["**/__pycache__"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-p no:warnings", "--import-mode=importlib"]
xfail_strict = true
log_cli_level = "warn"
testpaths = ["tests"]

[tool.black]
exclude = '''
/(
    \.git
  | \.tox
)/
'''

[tool.isort]
profile = 'black'
skip_gitignore = true

[tool.coverage.run]
source = ["src"]

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "except ImportError",
]

[tool.ruff]
select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
extend-ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long
  "PT004",  # Use underscore for non-returning fixture (use usefixture instead)
  "B028",   # No explicit stacklevel
  "EM101",  # Exception must not use a string literal
  "EM102",  # Exception must not use an f-string literal
]
typing-modules = ["mypackage._compat.typing"]
src = ["src"]
unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
exclude = []
flake8-unused-arguments.ignore-variadic-names = true
extend-exclude = ["tests"]
pydocstyle.convention = "numpy"
isort.known-first-party = ["mofpy"]

[tool.mypy]
ignore_missing_imports = true
namespace_packages = true
explicit_package_bases = true
no_implicit_optional = false
disable_error_code = "annotation-unchecked"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
